using System.Collections.ObjectModel;
using Athena.DataModel;
using Athena.DataModel.Core;
using Athena.Resources.Localization;
using CommunityToolkit.Maui.Alerts;
using CommunityToolkit.Maui.Core;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Syncfusion.Maui.Popup;

namespace Athena.UI
{
    public partial class TagsOverviewViewModel : ContextViewModel
    {
        [ObservableProperty]
        private VisualCollection<TagViewModel, Tag> _tags;

        [ObservableProperty]
        private ObservableCollection<ColorViewModel> _predefinedColors;

        [ObservableProperty]
        private ColorViewModel _selectedBackgroundColor;

        [ObservableProperty]
        private ColorViewModel _selectedTextColor;

        [ObservableProperty]
        private string _selectedTagName;

        [ObservableProperty]
        private bool _isEditPopupOpen;

        [ObservableProperty]
        private PopupButtonAppearanceMode _appearanceMode;

        [ObservableProperty]
        private TagViewModel _selectedTag;

        private static int BlackIndex = 0;
        private static int WhiteIndex = 1;

        public TagsOverviewViewModel()
        {
            // Autogenerated.
            PredefinedColors = new() {
                new ColorViewModel("Black", Colors.Black.ToHex()),
                new ColorViewModel("White", Colors.White.ToHex()),
                new ColorViewModel("Red", Colors.IndianRed.ToHex()),
                new ColorViewModel("Blue", Colors.Blue.ToHex()),
                new ColorViewModel("Green", Colors.Green.ToHex()),
                new ColorViewModel("Yellow", Colors.Yellow.ToHex()),
            };
        }

        public override async Task InitializeAsync()
        {
            await ExecuteBackgroundAction(context =>
            {
                var tags = Tag.ReadAll(context).Select(x => new TagViewModel(x));
                Tags = new(tags);
            });
        }

        protected override void OnDataPublished(DataPublishedEventArgs e)
        {
            if (!e.Tags.Any())
                return;

            Application.Current.Dispatcher.Dispatch(() =>
            {
                foreach (var tag in e.Tags)
                {
                    if (tag.Type == UpdateType.Edit)
                    {
                        Tag toEdit = Tags.FirstOrDefault(x => x.Id == tag.Entity.Id);

                        if (toEdit == null)
                            continue;

                        Tags.Delete(toEdit);
                        Tags.Add(new TagViewModel(tag));
                    }
                    else
                    {

                        Tags.Process(tag);
                    }
                }
            });
        }

        [RelayCommand]
        public void TagSelected(TagViewModel tag)
        {
            if (tag == null)
                return;

            AppearanceMode = PopupButtonAppearanceMode.TwoButton;
            SelectedTag = tag;

            var bgColor = PredefinedColors.FirstOrDefault(
                x => x.Hex.Equals(SelectedTag.BackgroundColor, StringComparison.OrdinalIgnoreCase));

            bgColor ??= PredefinedColors[WhiteIndex];

            var textColor = PredefinedColors.FirstOrDefault(
                x => x.Hex.Equals(SelectedTag.TextColor, StringComparison.OrdinalIgnoreCase));

            textColor ??= PredefinedColors[BlackIndex];

            SelectedBackgroundColor = bgColor;
            SelectedTextColor = textColor;
            SelectedTagName = SelectedTag.Name;

            IsEditPopupOpen = true;
        }

        [RelayCommand]
        internal void AddNewTag()
        {
            AppearanceMode = PopupButtonAppearanceMode.OneButton;
            Tag newTag = new Tag();
            SelectedTag = new TagViewModel(newTag);
            SelectedBackgroundColor = PredefinedColors[WhiteIndex];
            SelectedTextColor = PredefinedColors[BlackIndex];
            SelectedTagName = string.Empty;

            IsEditPopupOpen = true;
        }

        [RelayCommand]
        public void SaveSelectedTag()
        {
            if (SelectedTag == null)
                return;

            bool isNew = SelectedTag.Id == IntegerEntityKey.TemporaryId;

            var context = RetrieveContext();

            SelectedTag.Name = SelectedTagName;
            SelectedTag.BackgroundColor = SelectedBackgroundColor.Hex;
            SelectedTag.TextColor = SelectedTextColor.Hex;

            SelectedTag.Save(context);
            Services.GetService<IDataBrokerService>().Publish<Tag>(
                context, SelectedTag, isNew ? UpdateType.Add : UpdateType.Edit);

            SelectedTag = null;
            IsEditPopupOpen = false;
        }

        [RelayCommand]
        public async Task DeleteSelectedTag()
        {
            if (SelectedTag == null)
                return;

            if (SelectedTag.Id == IntegerEntityKey.TemporaryId)
                return;

            bool delete = await DisplayAlert(
                    Localization.DeleteTag,
                    string.Format(Localization.DeleteTagConfirm, SelectedTag.Name),
                    Localization.Yes,
                    Localization.No);

            var context = RetrieveContext();

            if (delete)
            {
                SelectedTag.Delete(context);

                Services.GetService<IDataBrokerService>().Publish<Tag>(context, SelectedTag, UpdateType.Delete);
                await Toast.Make(string.Format(Localization.TagDeleted, SelectedTag.Name), ToastDuration.Long).Show();
            }

            SelectedTag = null;
            IsEditPopupOpen = false;
        }
    }
}
